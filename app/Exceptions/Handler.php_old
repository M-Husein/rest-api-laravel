<?php
namespace App\Exceptions;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Spatie\QueryBuilder\Exceptions\InvalidQuery;
use Illuminate\Validation\ValidationException;
// use Illuminate\Http\Response;
use Illuminate\Auth\Access\AuthorizationException;
use Spatie\Permission\Exceptions\UnauthorizedException;

class Handler extends ExceptionHandler{
  protected $levels = [];
  protected $dontReport = [];
  protected $dontFlash = [
    'current_password',
    'password',
    'password_confirmation'
  ];

  public function register(): void{
    $this->reportable(function(Throwable $e){});
  }

  /**
   * Options: Only handle unauthenticated, need `Route::macro` in `app\Providers\AppServiceProvider.php`
   */
  // protected function unauthenticated($req, AuthenticationException $e){
  //   if($req->expectsJson()){
  //     return app('router')->myUnauthorizedResponse(); // $e
  //   }
  //   return parent::unauthenticated($req, $e);
  // }

  public function render($request, Throwable $e){
    if($request->is('api/*') || $request->wantsJson()){
      return $this->handleApiException($request, $e);
    }
    return parent::render($request, $e);
  }

  protected function handleApiException($request, Throwable $e){
    $code = $e->getCode();
    $err = $code > 0 ? $code : 500; // Response::HTTP_INTERNAL_SERVER_ERROR
    $msg = 'Something went wrong'; // An error occurred
    
    if($e instanceof ModelNotFoundException){
      $code = 404;
      $err = $code;
      $msg = 'Not found'; // Resource not found
    }
    elseif($e instanceof NotFoundHttpException){
      $code = 404;
      $err = $code;
      $msg = 'Endpoint not found';
    }
    elseif($e instanceof InvalidQuery){
      $code = 400;
      $err = $code;
      $msg = 'Invalid query parameters';
    }
    elseif($e instanceof ValidationException){
      $code = 422;
      $err = $e->errors();
    }

    elseif($e instanceof UnauthorizedException || $e instanceof AuthorizationException){
      $code = 403;
      $err = $code;
      $msg = $e->getMessage(); // 'You do not have permission to perform this action.',
    }

    elseif($e instanceof AuthenticationException){
      $code = 401; // Response::HTTP_UNAUTHORIZED
      $err = $code;
      $msg = 'Unauthorized'; // $e->getMessage() ?? 'Unauthorized' // Default $e->getMessage() = "Unauthenticated."
    }
    elseif(method_exists($e, 'getStatusCode')){
      $code = $e->getStatusCode();
    }

    $result = [
      'errors' => $err,
      'message' => $msg,
      'url' => $request->fullUrl() // OPTIONS
    ];

    // Debug info (local/dev only)
    if(config('app.debug')){
      $result['info'] = $e->getMessage();
      $result['exception'] = get_class($e);
      $result['trace'] = $e->getTrace();
    }

    return response()->json($result, $code);
  }
}