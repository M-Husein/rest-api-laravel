<?php
/**
 * @FROM DeepSeek
 */
namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to your application's "home" route.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/home';

    /**
     * The controller namespace for the application.
     *
     * When present, controller route declarations will automatically be prefixed with this namespace.
     *
     * @var string|null
     */
    protected $namespace = 'App\\Http\\Controllers';

    /**
     * Define your route model bindings, pattern filters, etc.
     */
    public function boot(): void
    {
        $this->configureRateLimiting();

        $this->routes(function () {
            $this->mapApiRoutes();
            $this->mapWebRoutes();
        });
    }

    /**
     * Configure the rate limiters for the application.
     */
    protected function configureRateLimiting(): void
    {
        // General API rate limiting
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(config('api.throttle.limit', 60))
                ->by($request->user()?->id ?: $request->ip())
                ->response(function (Request $request, array $headers) {
                    return response()->json([
                        'message' => 'Too many requests',
                        'retry_after' => $headers['Retry-After'],
                        'limit' => $headers['X-RateLimit-Limit'],
                        'remaining' => $headers['X-RateLimit-Remaining'],
                    ], 429);
                });
        });

        // Strict rate limiting for authentication endpoints
        RateLimiter::for('auth', function (Request $request) {
            return Limit::perMinute(10)->by($request->ip());
        });
    }

    /**
     * Define the "api" routes for the application.
     *
     * These routes are typically stateless.
     */
    protected function mapApiRoutes(): void
    {
        // API route binding pattern
        Route::pattern('id', '[0-9]+');
        Route::pattern('uuid', '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');

        // Current API version (symlinked)
        Route::middleware(['api', 'api.response'])
            ->prefix('api')
            ->namespace($this->namespace)
            ->group(base_path('routes/api.php'));

        // Versioned API routes
        $this->mapApiVersionRoutes('v1');
        $this->mapApiVersionRoutes('v2');
    }

    /**
     * Define versioned API routes
     */
    protected function mapApiVersionRoutes(string $version): void
    {
        Route::middleware(['api', 'api.response', "api.version:{$version}"])
            ->prefix("api/{$version}")
            ->namespace("{$this->namespace}\\Api\\{$this->versionNamespace($version)}")
            ->group(function () use ($version) {
                $this->requireApiRouteFiles($version);
            });
    }

    /**
     * Convert version to namespace (v1 -> V1)
     */
    protected function versionNamespace(string $version): string
    {
        return strtoupper(substr($version, 0, 1)) . substr($version, 1);
    }

    /**
     * Require all route files for the API version
     */
    protected function requireApiRouteFiles(string $version): void
    {
        $routePath = base_path("routes/api/{$version}");

        if (!file_exists($routePath)) {
            return;
        }

        foreach (scandir($routePath) as $file) {
            if (pathinfo($file, PATHINFO_EXTENSION) === 'php') {
                require "{$routePath}/{$file}";
            }
        }
    }

    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     */
    protected function mapWebRoutes(): void
    {
        Route::middleware('web')
            ->namespace($this->namespace)
            ->group(base_path('routes/web.php'));
    }
}