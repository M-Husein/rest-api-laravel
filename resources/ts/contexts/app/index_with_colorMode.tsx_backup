import { PropsWithChildren, createContext, useEffect, useState, useContext } from "react";
import { ConfigProvider, theme } from "antd";
import { config } from './config';

type ColorModeContextType = {
  mode: string;
  setMode: (mode: string) => void;
};

const toggleTheme = (isDark: boolean) => {
  let html = document.documentElement;
  html.classList.toggle("dark", isDark);
  let metaTheme = html.querySelector('meta[name=theme-color]') as any;
  if(metaTheme){
    metaTheme.content = getComputedStyle(html).getPropertyValue('--q-bg-nav'); // --q-bg-main
  }
}

export const ColorModeContext = createContext<ColorModeContextType>(
  {} as ColorModeContextType
);

export const useApp = () => {
  // const { auth } = useContext(AppContext);
  // useDebugValue(auth, auth => auth?.user ? "Logged In" : "Logged Out")
  return useContext(ColorModeContext);
}

export const AppContextProvider: React.FC<PropsWithChildren> = ({
  children,
}) => {
  const colorModeFromLocalStorage = localStorage.getItem("colorMode");
  
  // const isSystemPreferenceDark = window?.matchMedia("(prefers-color-scheme: dark)").matches;
  // const systemPreference = isSystemPreferenceDark ? "dark" : "light";

  const [mode, setMode] = useState(colorModeFromLocalStorage || "light"); //  || systemPreference
  const isDark = mode === "dark";

  useEffect(() => {
    localStorage.setItem("colorMode", mode);
    toggleTheme(mode === "dark");
  }, [mode]);

  const setColorMode = () => {
    setMode(isDark ? "light" : "dark");
  };

  return (
    <ColorModeContext.Provider
      value={{
        mode,
        setMode: setColorMode,
      }}
    >
      <ConfigProvider
        // locale={AntLanguages[currentLocale || currentLang]}
        theme={{
          algorithm: isDark ? theme.darkAlgorithm : theme.defaultAlgorithm,
          ...config
        }}
      >
        {children}
      </ConfigProvider>
    </ColorModeContext.Provider>
  );
};
