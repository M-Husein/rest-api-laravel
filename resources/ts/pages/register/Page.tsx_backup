import React from "react";
import {
  RegisterPageProps,
  RegisterFormTypes,
  useRouterType,
  useLink,
  useActiveAuthProvider,
} from "@refinedev/core";
import {
  Row,
  Col,
  Layout,
  Card,
  Typography,
  Form,
  Input,
  Button,
  LayoutProps,
  CardProps,
  FormProps,
  Divider,
  theme,
} from "antd";
import { useTranslate, useRouterContext, useRegister } from "@refinedev/core";

type RegisterProps = RegisterPageProps<LayoutProps, CardProps, FormProps>;
/**
 * **refine** has register page form which is served on `/register` route when the `authProvider` configuration is provided.
 *
 * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#register} for more details.
 */
const RegisterPage: React.FC<RegisterProps> = ({
  providers,
  loginLink,
  wrapperProps,
  contentProps,
  renderContent,
  formProps,
  title,
  hideForm,
}) => {
  const { token } = theme.useToken();
  const [form] = Form.useForm<RegisterFormTypes>();
  const translate = useTranslate();
  const routerType = useRouterType();
  const Link = useLink();
  const { Link: LegacyLink } = useRouterContext();

  const ActiveLink = routerType === "legacy" ? LegacyLink : Link;

  const authProvider = useActiveAuthProvider();
  const { mutate: register, isLoading } = useRegister<RegisterFormTypes>({
    v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),
  });

  const PageTitle = title === false ? null : <h1 className="text-center">{import.meta.env.VITE_APP_NAME}</h1>;

  const renderProviders = () => {
    if (providers && providers.length > 0) {
      return (
        <>
          {providers.map((provider) => {
            return (
              <Button
                key={provider.name}
                type="default"
                block
                icon={provider.icon}
                style={{
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  width: '100%',
                  marginBottom: 8,
                }}
                onClick={() =>
                  register({
                    providerName: provider.name,
                  })
                }
              >
                {provider.label}
              </Button>
            );
          })}

          {!hideForm && (
            <Divider>
              <Typography.Text
                style={{
                  color: token.colorTextLabel,
                }}
              >
                {translate("pages.login.divider", "or")}
              </Typography.Text>
            </Divider>
          )}
        </>
      );
    }

    return null;
  };

  const CardContent = (
    <Card
      style={{
        maxWidth: 400,
        margin: 'auto',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.02), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 1px 2px rgba(0, 0, 0, 0.03)',
        backgroundColor: token.colorBgElevated,
      }}
      styles={{
        header: {
          borderBottom: 0,
          padding: 0,
        },
      }}
      {...(contentProps ?? {})}
    >
      {renderProviders()}

      {!hideForm && (
        <Form<RegisterFormTypes>
          layout="vertical"
          form={form}
          onFinish={(values) => register(values)}
          requiredMark={false}
          {...formProps}
        >
          <Form.Item
            name="name"
            label="Name" // {translate("pages.register.email", "Email")}
            rules={[
              { required: true },
            ]}
          >
            <Input
              size="large"
              // placeholder={translate("pages.register.fields.email", "Email")}
            />
          </Form.Item>

          <Form.Item
            name="email"
            label={translate("pages.register.email", "Email")}
            rules={[
              { required: true },
              {
                type: "email",
                message: translate(
                  "pages.register.errors.validEmail",
                  "Invalid email address",
                ),
              },
            ]}
          >
            <Input
              size="large"
              placeholder={translate("pages.register.fields.email", "Email")}
            />
          </Form.Item>

          <Form.Item
            name="password"
            label={translate("pages.register.fields.password", "Password")}
            rules={[{ required: true }]}
          >
            <Input.Password
              size="large"
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off" 
              spellCheck={false}
            />
          </Form.Item>

          <Form.Item
            name="c_password" // password_confirmation
            label="Confirm Password" // {translate("pages.register.fields.password", "Password")}
            rules={[{ required: true }]}
          >
            <Input.Password
              size="large"
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off" 
              spellCheck={false}
            />
          </Form.Item>

          <div
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              marginBottom: 24,
            }}
          >
            {loginLink ?? (
              <Typography.Text
                style={{
                  marginLeft: 'auto',
                }}
              >
                {translate(
                  "pages.register.buttons.haveAccount",
                  "Have an account?",
                )}
                {" "}
                <ActiveLink
                  to="/login"
                  style={{
                    fontWeight: 700,
                    color: token.colorPrimaryTextHover,
                  }}
                >
                  {translate("pages.login.signin", "Sign in")}
                </ActiveLink>
              </Typography.Text>
            )}
          </div>

          <Form.Item
            style={{
              marginBottom: 0,
            }}
          >
            <Button
              type="primary"
              size="large"
              htmlType="submit"
              loading={isLoading}
              block
            >
              {translate("pages.register.buttons.submit", "Sign up")}
            </Button>
          </Form.Item>
        </Form>
      )}

      {hideForm && loginLink !== false && (
        <div
          style={{
            marginTop: hideForm ? 16 : 8,
          }}
        >
          <Typography.Text>
            {translate("pages.register.buttons.haveAccount", "Have an account?")}
            {" "}
            <ActiveLink
              to="/login"
              style={{
                fontWeight: 'bold',
                color: token.colorPrimaryTextHover,
              }}
            >
              {translate("pages.login.signin", "Sign in")}
            </ActiveLink>
          </Typography.Text>
        </div>
      )}
    </Card>
  );

  return (
    <Layout {...(wrapperProps ?? {})}>
      <Row
        justify="center"
        align={hideForm ? "top" : "middle"}
        style={{
          padding: '16px 0',
          minHeight: '100dvh',
          paddingTop: hideForm ? '15dvh' : 16,
        }}
      >
        <Col xs={22}>
          {renderContent ? (
            renderContent(CardContent, PageTitle)
          ) : (
            <>
              {PageTitle}
              {CardContent}
            </>
          )}
        </Col>
      </Row>
    </Layout>
  );
};

export default RegisterPage;
